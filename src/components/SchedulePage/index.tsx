/**
 * Schedule Page Component
 * 
 * Displays the course schedule generated by Classasaurus plugin
 */

import React from 'react';
import Layout from '@theme/Layout';
import Link from '@docusaurus/Link';
import { parseISO, format, startOfWeek, endOfWeek, getDay, addDays, isWithinInterval, isSameWeek } from 'date-fns';
import type { CourseSchedule, ScheduleEntry, Lab, Assignment } from '@site/plugins/classasaurus/types';
import { Alert, Box } from '@chakra-ui/react';
import { LuConstruction } from 'react-icons/lu';

// Type alias for date strings (ISO format)
type DateString = string;

// Component props - scheduleData comes from the plugin's modules
export interface Props {
  readonly scheduleData: CourseSchedule;
}

// Map day names to day numbers (0 = Sunday, 6 = Saturday)
const DAY_NAME_TO_NUMBER: { [key: string]: number } = {
  'Sunday': 0,
  'Monday': 1,
  'Tuesday': 2,
  'Wednesday': 3,
  'Thursday': 4,
  'Friday': 5,
  'Saturday': 6
};

// Helper to get the date for a specific day of week in a given week
function getDateForDayInWeek(weekStartDate: Date, dayName: string): DateString {
  const targetDayNumber = DAY_NAME_TO_NUMBER[dayName];
  const weekStartDayNumber = getDay(weekStartDate);

  let daysToAdd = targetDayNumber - weekStartDayNumber;
  if (daysToAdd < 0) {
    daysToAdd += 7;
  }

  const targetDate = addDays(weekStartDate, daysToAdd);
  return format(targetDate, 'yyyy-MM-dd');
}

// Helper to generate week structure for the schedule
function generateWeekStructure(entries: ScheduleEntry[], meetingDays: string[]): Map<number, Map<string, DateString>> {
  if (entries.length === 0) return new Map();

  // Find the range of dates
  const dates = entries.map(e => parseISO(e.date)).sort((a, b) => a.getTime() - b.getTime());
  const firstDate = dates[0];
  const lastDate = dates[dates.length - 1];

  // Start from the beginning of the week containing the first date
  const weekStart = startOfWeek(firstDate, { weekStartsOn: 0 }); // Sunday

  const weeks = new Map<number, Map<string, DateString>>();
  let currentWeekStart = weekStart;
  let weekNumber = 1;

  // Generate weeks until we pass the last date
  while (currentWeekStart <= lastDate) {
    const weekDates = new Map<string, DateString>();

    // For each meeting day, calculate what date it would be in this week
    meetingDays.forEach(dayName => {
      const dateStr = getDateForDayInWeek(currentWeekStart, dayName);
      const date = parseISO(dateStr);

      // Only include if it's within the course date range
      if (date >= firstDate && date <= lastDate) {
        weekDates.set(dayName, dateStr);
      }
    });

    // Only add week if it has at least one meeting day
    if (weekDates.size > 0) {
      weeks.set(weekNumber, weekDates);
      weekNumber++;
    }

    currentWeekStart = addDays(currentWeekStart, 7);
  }

  return weeks;
}

interface ScheduleTableProps {
  entries: ScheduleEntry[];
  sectionName?: string;
  lectureDays: string[]; // Days this section has lectures
  labDays: string[]; // Days this section has labs
  assignments: Assignment[]; // Course assignments
}

function ScheduleTable({ entries, sectionName, lectureDays, labDays, assignments }: ScheduleTableProps) {
  // Combine all meeting days (lectures and labs)
  const allMeetingDays = Array.from(new Set([...lectureDays, ...labDays]));

  // Create a map of date -> entry for quick lookup (all entries, not just lectures)
  const entryMap = new Map<DateString, ScheduleEntry>();
  entries.forEach(entry => {
    entryMap.set(entry.date, entry);
  });

  // Generate the week structure based on all meeting days
  const weekStructure = generateWeekStructure(entries, allMeetingDays);
  const weekNumbers = Array.from(weekStructure.keys()).sort((a, b) => a - b);

  // Create assignment map by week (find assignments released or due during this week)
  const assignmentsByWeek = new Map<number, Assignment[]>();
  weekNumbers.forEach(weekNum => {
    const weekDates = weekStructure.get(weekNum)!;
    const allDatesInWeek = Array.from(weekDates.values());

    if (allDatesInWeek.length > 0) {
      // Use the first date to establish the week interval
      const referenceDate = parseISO(allDatesInWeek[0]);
      const weekStart = startOfWeek(referenceDate, { weekStartsOn: 0 });
      const weekEnd = endOfWeek(referenceDate, { weekStartsOn: 0 });

      // Find assignments released or due during this week
      const weekAssignments = assignments.filter(a => {
        // Skip assignments without dates
        if (!a.assignedDate || !a.dueDate) return false;

        const assignedDate = parseISO(a.assignedDate);
        const dueDate = parseISO(a.dueDate);

        // Include if assigned or due during this week using isWithinInterval
        return isWithinInterval(assignedDate, { start: weekStart, end: weekEnd }) ||
          isWithinInterval(dueDate, { start: weekStart, end: weekEnd });
      });

      if (weekAssignments.length > 0) {
        assignmentsByWeek.set(weekNum, weekAssignments);
      }
    }
  });

  // Use the section's actual meeting days for columns (in proper order)
  const allDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  const daysOfWeek = allDays.filter(day => allMeetingDays.includes(day));

  return (
    <div>
      {sectionName && <h2>{sectionName}</h2>}
      <Alert.Root status='warning'>
        <Alert.Indicator>
          <LuConstruction />
        </Alert.Indicator>
        <Alert.Title>Draft Content</Alert.Title>
        <Alert.Content>
          <Alert.Description>
            This content is a work in progress. Note that not all labs are on Tuesday, this page will be updated to show the complete distribution of lab dates.
          </Alert.Description>
        </Alert.Content>
      </Alert.Root>
      <div style={{ overflowX: 'auto', overflowY: 'visible' }}>
        <table style={{ width: '100%', borderCollapse: 'collapse', marginBottom: '2rem' }}>
          <thead style={{ position: 'sticky', top: 0, zIndex: 10 }}>
            <tr style={{ borderBottom: '2px solid var(--ifm-color-emphasis-300)' }}>
              <th style={{
                padding: '0.75rem',
                textAlign: 'left',
                width: '80px',
                backgroundColor: 'var(--ifm-background-color)',
                borderBottom: '2px solid var(--ifm-color-emphasis-300)'
              }}>
                Week
              </th>
              {daysOfWeek.map(day => (
                <th key={day} style={{
                  padding: '0.75rem',
                  textAlign: 'left',
                  backgroundColor: 'var(--ifm-background-color)',
                  borderBottom: '2px solid var(--ifm-color-emphasis-300)'
                }}>
                  {day.slice(0, 3)}
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {weekNumbers.map((weekNum) => {
              const datesByDay = weekStructure.get(weekNum)!;

              return (
                <tr key={weekNum} style={{ borderBottom: '1px solid var(--ifm-color-emphasis-200)' }}>
                  <td style={{
                    padding: '0.75rem',
                    fontWeight: 'bold',
                    verticalAlign: 'top',
                    backgroundColor: 'var(--ifm-color-emphasis-50)'
                  }}>
                    {weekNum}
                  </td>

                  {daysOfWeek.map(day => {
                    const dateStr = datesByDay.get(day);

                    // No date for this day in this week - show gray cell
                    if (!dateStr) {
                      return (
                        <td key={day} style={{
                          padding: '0.75rem',
                          backgroundColor: 'var(--ifm-color-emphasis-100)',
                          verticalAlign: 'top',
                          minHeight: '60px'
                        }}>
                          <div style={{
                            fontSize: '0.75rem',
                            color: 'var(--ifm-color-emphasis-500)',
                            fontStyle: 'italic',
                            textAlign: 'center'
                          }}>
                            No class
                          </div>
                        </td>
                      );
                    }

                    const entry = entryMap.get(dateStr);
                    // Date exists but no entry found - should not happen but handle gracefully
                    if (!entry) {
                      return (
                        <td key={day} style={{
                          padding: '0.75rem',
                          backgroundColor: 'var(--ifm-color-emphasis-100)',
                          verticalAlign: 'top'
                        }}>
                          <div style={{
                            fontSize: '0.75rem',
                            color: 'var(--ifm-color-emphasis-500)',
                            fontStyle: 'italic',
                            textAlign: 'center'
                          }}>
                            No class
                          </div>
                        </td>
                      );
                    }

                    const date = parseISO(entry.date);
                    const formattedDate = format(date, 'MMM d');

                    // Check if this is a holiday
                    const isHolidayCell = !!entry.holiday;
                    const holidayName = entry.holiday?.name || '';

                    // Display topics if available, otherwise show lectureId
                    const topic = entry.lecture?.title
                      || (entry.lecture?.topics && entry.lecture.topics.length > 0 ? entry.lecture.topics[0] : '')
                      || entry.lecture?.lectureId
                      || '';
                    const notes = entry.notes || entry.meeting.notes || '';

                    const cellStyle: React.CSSProperties = {
                      padding: '0.75rem',
                      verticalAlign: 'top',
                      backgroundColor: isHolidayCell ? '#fff3cd' : undefined,
                      borderLeft: isHolidayCell ? '3px solid #ffc107' : undefined,
                    };

                    return (
                      <td key={day} style={cellStyle}>
                        <div style={{ fontSize: '0.85rem', color: 'var(--ifm-color-emphasis-700)', marginBottom: '0.25rem' }}>
                          {formattedDate}
                        </div>
                        {isHolidayCell ? (
                          <>
                            <div style={{
                              fontWeight: 'bold',
                              color: '#856404',
                              marginBottom: '0.25rem'
                            }}>
                              {holidayName}
                            </div>
                            <div style={{
                              fontSize: '0.8rem',
                              color: '#856404',
                              fontStyle: 'italic'
                            }}>
                              No Class
                            </div>
                          </>
                        ) : entry.lecture?.lectureId ? (
                          <div style={{ marginBottom: '0.25rem' }}>
                            <Link to={`/lecture-notes/${entry.lecture.lectureId}`}>
                              {topic}
                            </Link>
                          </div>
                        ) : (
                          <div style={{ marginBottom: '0.25rem' }}>
                            {topic}
                          </div>
                        )}
                        {notes && !isHolidayCell && (
                          <div style={{
                            fontSize: '0.8rem',
                            color: 'var(--ifm-color-emphasis-600)',
                            fontStyle: 'italic'
                          }}>
                            {notes}
                          </div>
                        )}

                        {/* Show lab if scheduled on this date */}
                        {entry.lab && !isHolidayCell && (
                          <Box>
                            {entry.lab.url ? (
                              <Link to={entry.lab.url}>
                                <div>{entry.lab.title}</div>
                              </Link>
                            ) : (
                              <div>{entry.lab.title}</div>
                            )}
                            {entry.lab.points && (
                              <div style={{ fontSize: '0.75rem', color: 'var(--ifm-color-emphasis-700)', marginTop: '0.25rem' }}>
                                {entry.lab.points} points
                              </div>
                            )}
                          </Box>
                        )}

                        {/* Show assignments in relevant date cells */}
                        {assignmentsByWeek.has(weekNum) && (() => {
                          const cellDate = parseISO(dateStr);
                          const cellAssignments = assignmentsByWeek.get(weekNum)!.filter(assignment => {
                            // Skip assignments without dates (shouldn't happen due to earlier filter)
                            if (!assignment.assignedDate || !assignment.dueDate) return false;

                            const assignedDate = parseISO(assignment.assignedDate);
                            const dueDate = parseISO(assignment.dueDate);

                            // Check if this cell's date matches the assigned or due date
                            return format(assignedDate, 'yyyy-MM-dd') === dateStr ||
                              format(dueDate, 'yyyy-MM-dd') === dateStr;
                          });

                          if (cellAssignments.length === 0) return null;

                          return (
                            <Box
                              borderRadius="md"
                              p="2"
                              mt="2"
                              bg="bg.emphasized"
                            >
                              {cellAssignments.map((assignment, idx) => {
                                // These should always exist due to filtering, but check anyway
                                if (!assignment.assignedDate || !assignment.dueDate) return null;

                                const assignedDate = parseISO(assignment.assignedDate);
                                const dueDate = parseISO(assignment.dueDate);

                                const isReleased = format(assignedDate, 'yyyy-MM-dd') === dateStr;
                                const isDue = format(dueDate, 'yyyy-MM-dd') === dateStr;

                                return (
                                  <div key={assignment.id} style={{ marginBottom: idx < cellAssignments.length - 1 ? '0.5rem' : '0' }}>
                                    <div style={{ fontSize: '0.8rem' }}>
                                      {isReleased && (
                                        <div style={{ marginBottom: isDue ? '0.25rem' : '0' }}>
                                          <strong>RELEASED:</strong>{' '}
                                          {assignment.url ? (
                                            <Link to={assignment.url}>{assignment.title}</Link>
                                          ) : (
                                            assignment.title
                                          )}
                                        </div>
                                      )}
                                      {isDue && (
                                        <div>
                                          <strong>DUE:</strong>{' '}
                                          {assignment.url ? (
                                            <Link to={assignment.url}>{assignment.title}</Link>
                                          ) : (
                                            assignment.title
                                          )}
                                          {assignment.dueTime && (
                                            <span style={{ fontSize: '0.7rem', color: 'var(--ifm-color-emphasis-600)' }}>
                                              {' '}at {assignment.dueTime}
                                            </span>
                                          )}
                                        </div>
                                      )}
                                    </div>
                                  </div>
                                );
                              })}
                            </Box>
                          );
                        })()}
                      </td>
                    );
                  })}
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    </div>
  );
}

export default function SchedulePage({ scheduleData }: Props) {
  const { config, scheduleBySection, importantDates } = scheduleData;
  return (
    <Layout
      title={`Schedule - ${config.courseCode}`}
      description={`Course schedule for ${config.courseCode}: ${config.courseTitle}`}
    >
      <div style={{ padding: '2rem', maxWidth: '1200px', margin: '0 auto' }}>
        <header style={{ marginBottom: '2rem' }}>
          <h1>{config.courseCode}: {config.courseTitle}</h1>
          <p style={{ fontSize: '1.2rem', color: 'var(--ifm-color-emphasis-700)' }}>
            {config.semester} | {config.academicYear}
          </p>
          <p>
            <strong>Duration:</strong> {format(parseISO(config.startDate), 'MMM d, yyyy')} - {format(parseISO(config.endDate), 'MMM d, yyyy')}
          </p>
        </header>

        {/* Sections */}
        <div>
          <h2>Course Schedule</h2>
          {config.sections.map((section) => {
            const sectionEntries = scheduleBySection[section.id];
            const meetingDaysDisplay = section.meetings.map(m => m.days.join('/')).join(', ');

            // Separate lecture and lab days
            const lectureDays = new Set<string>();
            const labDays = new Set<string>();

            section.meetings.forEach(m => {
              if (m.type === 'lab') {
                m.days.forEach(day => labDays.add(day));
              } else {
                m.days.forEach(day => lectureDays.add(day));
              }
            });

            const lectureDaysArray = Array.from(lectureDays);
            const labDaysArray = Array.from(labDays);

            return (
              <div key={section.id} style={{ marginBottom: '3rem' }}>
                <Box>
                  Loosely, the course is organized as follows:
                  <ul>
                    <li>Module 1 (weeks 1 - 5): Design principles and patterns, Java fundamentals</li>
                    <li>Module 2 (weeks 6 - 11): Development practices and user-centered design</li>
                    <li>Module 3 (weeks 12 - 15): Design in the large: architecture and distributed systems</li>
                  </ul>
                  Module 1 and 2 are followed by exams, and Module 3 is followed by a cumulative final exam.

                </Box>
                {/* <div style={{ marginBottom: '1rem' }}> */}
                {/* <h3>{section.name}</h3> */}
                {/* {section.crn && <p><strong>CRN:</strong> {section.crn}</p>}
                  <p><strong>Meeting Days:</strong> {meetingDaysDisplay}</p>
                  {section.instructors && section.instructors.length > 0 && (
                    <p><strong>Instructor(s):</strong> {section.instructors.join(', ')}</p>
                  )}
                  <p><strong>Total Meetings:</strong> {sectionEntries.length}</p> */}
                {/* </div> */}
                <ScheduleTable
                  entries={sectionEntries}
                  sectionName={section.name}
                  lectureDays={lectureDaysArray}
                  labDays={labDaysArray}
                  assignments={config.assignments || []}
                />
              </div>
            );
          })}
        </div>

        {/* Assignments (if any) */}
        {config.assignments && config.assignments.length > 0 && (
          <div style={{ marginTop: '3rem' }}>
            <h2>Assignments</h2>
            <table style={{ width: '100%', borderCollapse: 'collapse' }}>
              <thead>
                <tr style={{ borderBottom: '2px solid var(--ifm-color-emphasis-300)' }}>
                  <th style={{ padding: '0.75rem', textAlign: 'left' }}>Assignment</th>
                  <th style={{ padding: '0.75rem', textAlign: 'left' }}>Type</th>
                  <th style={{ padding: '0.75rem', textAlign: 'left' }}>Assigned</th>
                  <th style={{ padding: '0.75rem', textAlign: 'left' }}>Due</th>
                  <th style={{ padding: '0.75rem', textAlign: 'left' }}>Points</th>
                </tr>
              </thead>
              <tbody>
                {config.assignments.map((assignment) => (
                  <tr key={assignment.id} style={{ borderBottom: '1px solid var(--ifm-color-emphasis-200)' }}>
                    <td style={{ padding: '0.75rem' }}>
                      {assignment.url ? (
                        <a href={assignment.url}>{assignment.title}</a>
                      ) : (
                        assignment.title
                      )}
                    </td>
                    <td style={{ padding: '0.75rem' }}>{assignment.type}</td>
                    <td style={{ padding: '0.75rem' }}>
                      {assignment.assignedDate ? format(parseISO(assignment.assignedDate), 'MMM d, yyyy') : 'TBD'}
                    </td>
                    <td style={{ padding: '0.75rem' }}>
                      {assignment.dueDate ? format(parseISO(assignment.dueDate), 'MMM d, yyyy') : 'TBD'}
                      {assignment.dueTime && ` ${assignment.dueTime}`}
                    </td>
                    <td style={{ padding: '0.75rem' }}>{assignment.points || '-'}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        {/* Office Hours */}
        {config.metadata?.officeHours && config.metadata.officeHours.length > 0 && (
          <div style={{ marginTop: '3rem' }}>
            <h2>Office Hours</h2>
            {config.metadata.officeHours.map((oh, idx) => (
              <div key={idx} style={{ marginBottom: '1rem' }}>
                <p><strong>{oh.instructor}:</strong> {oh.schedule}</p>
                <p>Location: {oh.location}</p>
                {oh.bookingUrl && (
                  <p><a href={oh.bookingUrl} target="_blank" rel="noopener noreferrer">Book appointment</a></p>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    </Layout>
  );
}

