/**
 * Schedule Page Component
 * 
 * Displays the course schedule generated by Classasaurus plugin
 */

import React from 'react';
import Layout from '@theme/Layout';
import Link from '@docusaurus/Link';
import { parseISO, format, startOfWeek, endOfWeek, getDay, addDays, isWithinInterval, isSameWeek } from 'date-fns';
import type { CourseSchedule, ScheduleEntry } from '@site/plugins/classasaurus/types';

// Type alias for date strings (ISO format)
type DateString = string;

// Component props - scheduleData comes from the plugin's modules
export interface Props {
  readonly scheduleData: CourseSchedule;
}

// Map day names to day numbers (0 = Sunday, 6 = Saturday)
const DAY_NAME_TO_NUMBER: { [key: string]: number } = {
  'Sunday': 0,
  'Monday': 1,
  'Tuesday': 2,
  'Wednesday': 3,
  'Thursday': 4,
  'Friday': 5,
  'Saturday': 6
};

// Helper to get the date for a specific day of week in a given week
function getDateForDayInWeek(weekStartDate: Date, dayName: string): DateString {
  const targetDayNumber = DAY_NAME_TO_NUMBER[dayName];
  const weekStartDayNumber = getDay(weekStartDate);
  
  let daysToAdd = targetDayNumber - weekStartDayNumber;
  if (daysToAdd < 0) {
    daysToAdd += 7;
  }
  
  const targetDate = addDays(weekStartDate, daysToAdd);
  return format(targetDate, 'yyyy-MM-dd');
}

// Helper to generate week structure for the schedule
function generateWeekStructure(entries: ScheduleEntry[], meetingDays: string[]): Map<number, Map<string, DateString>> {
  if (entries.length === 0) return new Map();
  
  // Find the range of dates
  const dates = entries.map(e => parseISO(e.date)).sort((a, b) => a.getTime() - b.getTime());
  const firstDate = dates[0];
  const lastDate = dates[dates.length - 1];
  
  // Start from the beginning of the week containing the first date
  const weekStart = startOfWeek(firstDate, { weekStartsOn: 0 }); // Sunday
  
  const weeks = new Map<number, Map<string, DateString>>();
  let currentWeekStart = weekStart;
  let weekNumber = 1;
  
  // Generate weeks until we pass the last date
  while (currentWeekStart <= lastDate) {
    const weekDates = new Map<string, DateString>();
    
    // For each meeting day, calculate what date it would be in this week
    meetingDays.forEach(dayName => {
      const dateStr = getDateForDayInWeek(currentWeekStart, dayName);
      const date = parseISO(dateStr);
      
      // Only include if it's within the course date range
      if (date >= firstDate && date <= lastDate) {
        weekDates.set(dayName, dateStr);
      }
    });
    
    // Only add week if it has at least one meeting day
    if (weekDates.size > 0) {
      weeks.set(weekNumber, weekDates);
      weekNumber++;
    }
    
    currentWeekStart = addDays(currentWeekStart, 7);
  }
  
  return weeks;
}

interface ScheduleTableProps {
  entries: ScheduleEntry[];
  sectionName?: string;
  lectureDays: string[]; // Days this section has lectures
  labDays: string[]; // Days this section has labs
  assignments: any[]; // Course assignments
}

function ScheduleTable({ entries, sectionName, lectureDays, labDays, assignments }: ScheduleTableProps) {
  // Separate entries by meeting type
  const lectureEntries = entries.filter(e => e.meeting.type !== 'lab');
  const labEntries = entries.filter(e => e.meeting.type === 'lab');
  
  // Create a map of date -> entry for quick lookup
  const lectureEntryMap = new Map<DateString, ScheduleEntry>();
  lectureEntries.forEach(entry => {
    lectureEntryMap.set(entry.date, entry);
  });
  
  const labEntryMap = new Map<DateString, ScheduleEntry>();
  labEntries.forEach(entry => {
    labEntryMap.set(entry.date, entry);
  });
  
  // Generate the week structure based on lecture days
  const weekStructure = generateWeekStructure(lectureEntries, lectureDays);
  const weekNumbers = Array.from(weekStructure.keys()).sort((a, b) => a - b);
  
  // Create assignment map by week (find assignments released or due during this week)
  const assignmentsByWeek = new Map<number, any[]>();
  weekNumbers.forEach(weekNum => {
    const weekDates = weekStructure.get(weekNum)!;
    const allDatesInWeek = Array.from(weekDates.values());
    
    if (allDatesInWeek.length > 0) {
      // Use the first date to establish the week interval
      const referenceDate = parseISO(allDatesInWeek[0]);
      const weekStart = startOfWeek(referenceDate, { weekStartsOn: 0 });
      const weekEnd = endOfWeek(referenceDate, { weekStartsOn: 0 });
      
      // Find assignments released or due during this week
      const weekAssignments = assignments.filter(a => {
        const assignedDate = parseISO(a.assignedDate);
        const dueDate = parseISO(a.dueDate);
        
        // Include if assigned or due during this week using isWithinInterval
        return isWithinInterval(assignedDate, { start: weekStart, end: weekEnd }) ||
               isWithinInterval(dueDate, { start: weekStart, end: weekEnd });
      });
      
      if (weekAssignments.length > 0) {
        assignmentsByWeek.set(weekNum, weekAssignments);
      }
    }
  });
  
  // Create lab map by week (find labs scheduled within the week boundary)
  const labsByWeek = new Map<number, any[]>();
  weekNumbers.forEach(weekNum => {
    const weekDates = weekStructure.get(weekNum)!;
    const allDatesInWeek = Array.from(weekDates.values());
    
    if (allDatesInWeek.length > 0) {
      // Use the first date to establish the week
      const referenceDate = parseISO(allDatesInWeek[0]);
      
      // Find all labs that fall in the same week as the reference date
      const weekLabs: any[] = [];
      labEntries.forEach(entry => {
        if (entry.lab) {
          const labDate = parseISO(entry.date);
          // Use isSameWeek to check if lab is in this week
          if (isSameWeek(labDate, referenceDate, { weekStartsOn: 0 })) {
            // Avoid duplicates
            if (!weekLabs.find(l => l.id === entry.lab!.id)) {
              weekLabs.push(entry.lab);
            }
          }
        }
      });
      
      if (weekLabs.length > 0) {
        labsByWeek.set(weekNum, weekLabs);
      }
    }
  });
  
  // Use the section's actual meeting days for columns (in proper order)
  const allDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  const daysOfWeek = allDays.filter(day => lectureDays.includes(day));
  
  return (
    <div style={{ overflowX: 'auto' }}>
      {sectionName && <h2>{sectionName}</h2>}
      <table style={{ width: '100%', borderCollapse: 'collapse', marginBottom: '2rem' }}>
        <thead>
          <tr style={{ borderBottom: '2px solid var(--ifm-color-emphasis-300)' }}>
            <th style={{ padding: '0.75rem', textAlign: 'left', width: '80px' }}>Week</th>
            <th style={{ padding: '0.75rem', textAlign: 'left', minWidth: '150px', borderRight: '3px solid var(--ifm-color-emphasis-700)' }}>
              Lab
            </th>
            {daysOfWeek.map(day => (
              <th key={day} style={{ padding: '0.75rem', textAlign: 'left' }}>
                {day.slice(0, 3)}
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {weekNumbers.map((weekNum) => {
            const datesByDay = weekStructure.get(weekNum)!;
            
            return (
              <tr key={weekNum} style={{ borderBottom: '1px solid var(--ifm-color-emphasis-200)' }}>
                <td style={{ 
                  padding: '0.75rem', 
                  fontWeight: 'bold',
                  verticalAlign: 'top',
                  backgroundColor: 'var(--ifm-color-emphasis-50)'
                }}>
                  {weekNum}
                </td>
                
                {/* Lab column */}
                <td style={{ 
                  padding: '0.75rem', 
                  verticalAlign: 'top',
                  borderRight: '3px solid var(--ifm-color-emphasis-700)'
                }}>
                  {labsByWeek.has(weekNum) ? (
                    <div>
                      {labsByWeek.get(weekNum)!.map((lab, idx) => (
                        <div key={lab.id} style={{ marginBottom: idx < labsByWeek.get(weekNum)!.length - 1 ? '0.75rem' : '0' }}>
                          {lab.url ? (
                            <Link to={lab.url}>
                              <div style={{ fontSize: '0.9rem' }}>{lab.title}</div>
                            </Link>
                          ) : (
                            <div style={{ fontSize: '0.9rem' }}>{lab.title}</div>
                          )}
                          {lab.points && (
                            <div style={{ fontSize: '0.75rem', color: 'var(--ifm-color-emphasis-600)', marginTop: '0.25rem' }}>
                              {lab.points} points
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div style={{ fontSize: '0.8rem', fontStyle: 'italic', color: 'var(--ifm-color-emphasis-600)' }}>
                      â€”
                    </div>
                  )}
                </td>
                
                {daysOfWeek.map(day => {
                  const dateStr = datesByDay.get(day);
                  
                  // No date for this day in this week - show gray cell
                  if (!dateStr) {
                    return (
                      <td key={day} style={{ 
                        padding: '0.75rem',
                        backgroundColor: 'var(--ifm-color-emphasis-100)',
                        verticalAlign: 'top',
                        minHeight: '60px'
                      }}>
                        <div style={{ 
                          fontSize: '0.75rem', 
                          color: 'var(--ifm-color-emphasis-500)',
                          fontStyle: 'italic',
                          textAlign: 'center'
                        }}>
                          No class
                        </div>
                      </td>
                    );
                  }
                  
                  const entry = lectureEntryMap.get(dateStr);
                  // Date exists but no entry found - should not happen but handle gracefully
                  if (!entry) {
                    return (
                      <td key={day} style={{ 
                        padding: '0.75rem',
                        backgroundColor: 'var(--ifm-color-emphasis-100)',
                        verticalAlign: 'top'
                      }}>
                        <div style={{ 
                          fontSize: '0.75rem', 
                          color: 'var(--ifm-color-emphasis-500)',
                          fontStyle: 'italic',
                          textAlign: 'center'
                        }}>
                          No class
                        </div>
                      </td>
                    );
                  }
                  
                  const date = parseISO(entry.date);
                  const formattedDate = format(date, 'MMM d');
                  
                  // Check if this is a holiday
                  const isHolidayCell = !!entry.holiday;
                  const holidayName = entry.holiday?.name || '';
                  
                  // Display topics if available, otherwise show lectureId
                  const topic = entry.lecture?.title 
                    || (entry.lecture?.topics && entry.lecture.topics.length > 0 ? entry.lecture.topics[0] : '')
                    || entry.lecture?.lectureId 
                    || '';
                  const notes = entry.notes || entry.meeting.notes || '';
                  
                  const cellStyle: React.CSSProperties = {
                    padding: '0.75rem',
                    verticalAlign: 'top',
                    backgroundColor: isHolidayCell ? '#fff3cd' : undefined,
                    borderLeft: isHolidayCell ? '3px solid #ffc107' : undefined,
                  };
                  
                  return (
                    <td key={day} style={cellStyle}>
                      <div style={{ fontSize: '0.85rem', color: 'var(--ifm-color-emphasis-700)', marginBottom: '0.25rem' }}>
                        {formattedDate}
                      </div>
                      {isHolidayCell ? (
                        <>
                          <div style={{ 
                            fontWeight: 'bold',
                            color: '#856404',
                            marginBottom: '0.25rem'
                          }}>
                            {holidayName}
                          </div>
                          <div style={{ 
                            fontSize: '0.8rem', 
                            color: '#856404',
                            fontStyle: 'italic'
                          }}>
                            No Class
                          </div>
                        </>
                      ) : entry.lecture?.lectureId ? (
                        <div style={{ marginBottom: '0.25rem' }}>
                          <Link to={`/lecture-notes/${entry.lecture.lectureId}`}>
                            {topic}
                          </Link>
                        </div>
                      ) : (
                        <div style={{ marginBottom: '0.25rem' }}>
                          {topic}
                        </div>
                      )}
                      {notes && !isHolidayCell && (
                        <div style={{ 
                          fontSize: '0.8rem', 
                          color: 'var(--ifm-color-emphasis-600)',
                          fontStyle: 'italic'
                        }}>
                          {notes}
                        </div>
                      )}
                      
                      {/* Show assignments in relevant date cells */}
                      {assignmentsByWeek.has(weekNum) && (() => {
                        const cellDate = parseISO(dateStr);
                        const cellAssignments = assignmentsByWeek.get(weekNum)!.filter(assignment => {
                          const assignedDate = parseISO(assignment.assignedDate);
                          const dueDate = parseISO(assignment.dueDate);
                          
                          // Check if this cell's date matches the assigned or due date
                          return format(assignedDate, 'yyyy-MM-dd') === dateStr ||
                                 format(dueDate, 'yyyy-MM-dd') === dateStr;
                        });
                        
                        if (cellAssignments.length === 0) return null;
                        
                        return (
                          <div style={{
                            marginTop: '0.75rem',
                            padding: '0.5rem',
                            border: '1px solid var(--ifm-color-emphasis-300)',
                            borderRadius: '4px',
                            backgroundColor: 'var(--ifm-color-emphasis-50)'
                          }}>
                            {cellAssignments.map((assignment, idx) => {
                              const assignedDate = parseISO(assignment.assignedDate);
                              const dueDate = parseISO(assignment.dueDate);
                              
                              const isReleased = format(assignedDate, 'yyyy-MM-dd') === dateStr;
                              const isDue = format(dueDate, 'yyyy-MM-dd') === dateStr;
                              
                              return (
                                <div key={assignment.id} style={{ marginBottom: idx < cellAssignments.length - 1 ? '0.5rem' : '0' }}>
                                  <div style={{ fontSize: '0.8rem' }}>
                                    {isReleased && (
                                      <div style={{ marginBottom: isDue ? '0.25rem' : '0' }}>
                                        <strong>RELEASED:</strong>{' '}
                                        {assignment.url ? (
                                          <Link to={assignment.url}>{assignment.title}</Link>
                                        ) : (
                                          assignment.title
                                        )}
                                      </div>
                                    )}
                                    {isDue && (
                                      <div>
                                        <strong>DUE:</strong>{' '}
                                        {assignment.url ? (
                                          <Link to={assignment.url}>{assignment.title}</Link>
                                        ) : (
                                          assignment.title
                                        )}
                                        {assignment.dueTime && (
                                          <span style={{ fontSize: '0.7rem', color: 'var(--ifm-color-emphasis-600)' }}>
                                            {' '}at {assignment.dueTime}
                                          </span>
                                        )}
                                      </div>
                                    )}
                                  </div>
                                </div>
                              );
                            })}
                          </div>
                        );
                      })()}
                    </td>
                  );
                })}
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
}

export default function SchedulePage({ scheduleData }: Props) {
  const { config, scheduleBySection, importantDates } = scheduleData;
  return (
    <Layout
      title={`Schedule - ${config.courseCode}`}
      description={`Course schedule for ${config.courseCode}: ${config.courseTitle}`}
    >
      <div style={{ padding: '2rem', maxWidth: '1200px', margin: '0 auto' }}>
        <header style={{ marginBottom: '2rem' }}>
          <h1>{config.courseCode}: {config.courseTitle}</h1>
          <p style={{ fontSize: '1.2rem', color: 'var(--ifm-color-emphasis-700)' }}>
            {config.semester} | {config.academicYear}
          </p>
          <p>
            <strong>Duration:</strong> {format(parseISO(config.startDate), 'MMM d, yyyy')} - {format(parseISO(config.endDate), 'MMM d, yyyy')}
          </p>
        </header>

        {/* Sections */}
        <div>
          <h2>Course Schedule</h2>
          {config.sections.map((section) => {
            const sectionEntries = scheduleBySection[section.id];
            const meetingDaysDisplay = section.meetings.map(m => m.days.join('/')).join(', ');
            
            // Separate lecture and lab days
            const lectureDays = new Set<string>();
            const labDays = new Set<string>();
            
            section.meetings.forEach(m => {
              if (m.type === 'lab') {
                m.days.forEach(day => labDays.add(day));
              } else {
                m.days.forEach(day => lectureDays.add(day));
              }
            });
            
            const lectureDaysArray = Array.from(lectureDays);
            const labDaysArray = Array.from(labDays);
            
            return (
              <div key={section.id} style={{ marginBottom: '3rem' }}>
                <div style={{ marginBottom: '1rem' }}>
                  <h3>{section.name}</h3>
                  {section.crn && <p><strong>CRN:</strong> {section.crn}</p>}
                  <p><strong>Meeting Days:</strong> {meetingDaysDisplay}</p>
                  {section.instructors && section.instructors.length > 0 && (
                    <p><strong>Instructor(s):</strong> {section.instructors.join(', ')}</p>
                  )}
                  <p><strong>Total Meetings:</strong> {sectionEntries.length}</p>
                </div>
                <ScheduleTable 
                  entries={sectionEntries} 
                  sectionName={section.name} 
                  lectureDays={lectureDaysArray} 
                  labDays={labDaysArray}
                  assignments={config.assignments || []}
                />
              </div>
            );
          })}
        </div>

        {/* Assignments (if any) */}
        {config.assignments && config.assignments.length > 0 && (
          <div style={{ marginTop: '3rem' }}>
            <h2>Assignments</h2>
            <table style={{ width: '100%', borderCollapse: 'collapse' }}>
              <thead>
                <tr style={{ borderBottom: '2px solid var(--ifm-color-emphasis-300)' }}>
                  <th style={{ padding: '0.75rem', textAlign: 'left' }}>Assignment</th>
                  <th style={{ padding: '0.75rem', textAlign: 'left' }}>Type</th>
                  <th style={{ padding: '0.75rem', textAlign: 'left' }}>Assigned</th>
                  <th style={{ padding: '0.75rem', textAlign: 'left' }}>Due</th>
                  <th style={{ padding: '0.75rem', textAlign: 'left' }}>Points</th>
                </tr>
              </thead>
              <tbody>
                {config.assignments.map((assignment) => (
                  <tr key={assignment.id} style={{ borderBottom: '1px solid var(--ifm-color-emphasis-200)' }}>
                    <td style={{ padding: '0.75rem' }}>
                      {assignment.url ? (
                        <a href={assignment.url}>{assignment.title}</a>
                      ) : (
                        assignment.title
                      )}
                    </td>
                    <td style={{ padding: '0.75rem' }}>{assignment.type}</td>
                    <td style={{ padding: '0.75rem' }}>
                      {format(parseISO(assignment.assignedDate), 'MMM d, yyyy')}
                    </td>
                    <td style={{ padding: '0.75rem' }}>
                      {format(parseISO(assignment.dueDate), 'MMM d, yyyy')}
                      {assignment.dueTime && ` ${assignment.dueTime}`}
                    </td>
                    <td style={{ padding: '0.75rem' }}>{assignment.points || '-'}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        {/* Office Hours */}
        {config.metadata?.officeHours && config.metadata.officeHours.length > 0 && (
          <div style={{ marginTop: '3rem' }}>
            <h2>Office Hours</h2>
            {config.metadata.officeHours.map((oh, idx) => (
              <div key={idx} style={{ marginBottom: '1rem' }}>
                <p><strong>{oh.instructor}:</strong> {oh.schedule}</p>
                <p>Location: {oh.location}</p>
                {oh.bookingUrl && (
                  <p><a href={oh.bookingUrl} target="_blank" rel="noopener noreferrer">Book appointment</a></p>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    </Layout>
  );
}

